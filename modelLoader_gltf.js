import * as THREE from 'three';
import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';

export function loadModel(scene, camera, controls) {
  let currentModel = null; // Stocke le mod√®le actuel

  const loader = new GLTFLoader().setPath('3D_model/');
  loader.load('scene.gltf', (gltf) => {
    console.log('‚úÖ Mod√®le GLTF charg√©');
    const model = gltf.scene;
    currentModel = model;

    // Appliquer des propri√©t√©s aux maillages
    model.traverse((child) => {
      if (child.isMesh) {
        child.castShadow = true;
        child.receiveShadow = true;
        if (child.material) {
          child.material.envMapIntensity = 1;
          child.material.needsUpdate = true;
        }
      }
    });

    // üîπ Centrer et ajuster la position du mod√®le
    centerAndPositionModel(model, camera, controls);

    // Ajouter √† la sc√®ne
    scene.add(model);

  }, (xhr) => {
    console.log(`üîÑ Chargement GLTF : ${((xhr.loaded / xhr.total) * 100).toFixed(2)}%`);
  }, (error) => {
    console.error('‚ùå Erreur de chargement GLTF:', error);
  });
}

// Fonction pour centrer et ajuster le mod√®le GLTF et la cam√©ra
function centerAndPositionModel(model, camera, controls) {
  const box = new THREE.Box3().setFromObject(model);
  const center = box.getCenter(new THREE.Vector3());
  const size = box.getSize(new THREE.Vector3());

  const groundSize = 10; // Taille du sol d√©finie dans sceneSetup.js
  const maxModelSize = Math.max(size.x, size.y, size.z); // Utilise la plus grande dimension du mod√®le
  const scaleFactor = (groundSize * 0.1) / maxModelSize; // Calculer l'√©chelle

  model.scale.set(scaleFactor, scaleFactor, scaleFactor); // Redimensionner le mod√®le

  // Recalculer la bo√Æte apr√®s redimensionnement
  const newBox = new THREE.Box3().setFromObject(model);
  const newMinY = newBox.min.y;

  // üîπ Centrer et poser le mod√®le sur le sol
  model.position.sub(center);
  model.position.y = -newMinY+.05; // Positionner le mod√®le sur le sol

  // üîπ Ajuster la cam√©ra pour un bon cadrage
  const maxDim = Math.max(newBox.getSize(new THREE.Vector3()).x, newBox.getSize(new THREE.Vector3()).y, newBox.getSize(new THREE.Vector3()).z);
  
  // Calculer la distance de la cam√©ra en fonction de la plus grande dimension du mod√®le
  const fitHeightDistance = maxDim / (2 * Math.atan(Math.PI * camera.fov / 360)); // Distance verticale
  const fitWidthDistance = fitHeightDistance / camera.aspect; // Distance horizontale
  const distance = Math.max(fitHeightDistance, fitWidthDistance) * 1.5; // Assurer un espace suffisant autour du mod√®le

  const direction = new THREE.Vector3().subVectors(camera.position, center).normalize();
  camera.position.copy(center).add(direction.multiplyScalar(distance)); // Positionner la cam√©ra en fonction de la taille de l'objet

  camera.lookAt(new THREE.Vector3(0, size.y / 2, 0)); // Regard de la cam√©ra vers le centre du mod√®le
  controls.target.set(0, size.y / 2, 0); // Ajuster le point cible pour les contr√¥les
  controls.update(); // Mettre √† jour les contr√¥les
}
